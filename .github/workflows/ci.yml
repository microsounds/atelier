name: CI
on:
  push:
    paths:
    - .github/workflows/*
    - .profile
    - .bashrc
    - .local/bin/*
    - .once.d/*
    - Scripts/*

jobs:
  Install:
     runs-on: ubuntu-latest
     container: debian:bullseye
     steps:
       - name: Install prerequisite software
         run: apt-get update && apt-get install -y git gnupg1 wget sudo
       - name: Checkout dotfiles and bootstrap system
         run: |
           git clone --bare \
             "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" ~/.config/meta
           git --git-dir=$HOME/.config/meta --work-tree=$HOME \
             reset $GITHUB_SHA --hard
       - name: Run post-install system config scripts in order
         shell: bash -le {0}
         env:
           TERM: rxvt
         run: yes n | post-install
       - name: Assert and test selected components of the shell environment
         shell: bash -le {0}
         env:
           TERM: rxvt
         run: |
           GIT_WORK_TREE="$HOME" GIT_DIR="$HOME/.config/meta" path-gitstatus -p
           fgrep 'stdc.syntax' < ~/.local/share/nano/c.nanorc
           colors
           cpp -P <<- EOF
               #include <colors/nightdrive.h>
           EOF
           twopass ffmpeg -loglevel quiet -s 1920x1080 -t 0.2 -f rawvideo \
             -i /dev/urandom -c:v libvpx -b:v 100M -an noise.webm
           mpv --vo=null noise.webm
           screenfetch
           printf '%s' 'System install size: '; du -sh / 2> /dev/null || :
           printf '%s' 'Local install size: '; du -sh $HOME 2> /dev/null || :
       - name: Stress test nano_overlay and it's dependencies
         shell: bash -le {0}
         env:
           TERM: rxvt
           EXTERN_EDITOR: cat
         run: |
           for f in $(seq 50); do
             for g in rsa ed25519; do
               case $g in
                 rsa) bits=$(seq 1024 $((1024 * 6)) | shuf | head -n 1);;
                 ed25519) bits=256;;
               esac
               secret="$f taro bubble teas! >â€¿<"
               echo "$secret" > ok
               echo "$g-$bits" | figlet -f big
               yes y | ssh-keygen -q -f "$g-$bits" -t $g -b $bits -N '' -m pem
               echo "ENCRYPTING"
               yes y | nano-overlay -i "$g-$bits" -s ok || exit 1
               { gzip -d | tar -xO enc | file -; } < ok | fgrep 'openssl' || exit 1
               echo "READBACK"
               nano-overlay -i "$g-$bits" -s ok | fgrep "$secret" || exit 1
               if [ -f prev_key ]; then
                 echo "TESTING PREVIOUS ITERATION KEY"
                 nano-overlay -i prev_key -s ok && \
                 { echo "!!!! SECURITY FAILURE !!!!" | figlet -f banner; exit 1; }
               fi
               mv -v "$g-$bits" prev_key
               mv -v "$g-$bits.pub" prev_key.pub
               rm -rf "$g-$bits"*
             done
           done
